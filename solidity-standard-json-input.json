{
  "language": "Solidity",
  "sources": {
    "contracts/cont4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IToken {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n}\n\ncontract BridgeContract {\n    address public admin;\n    IToken public tokenA;\n    IToken public tokenB;\n\n    constructor(address _tokenA, address _tokenB) {\n        admin = msg.sender;\n        tokenA = IToken(_tokenA);\n        tokenB = IToken(_tokenB);\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Not admin\");\n        _;\n    }\n\n    function bridgeAToB(uint256 amount) external {\n        require(tokenA.transferFrom(msg.sender, address(this), amount), \"TokenA transfer failed\");\n        tokenA.burn(address(this), amount);\n        tokenB.mint(msg.sender, amount);\n    }\n\n    function bridgeBToA(uint256 amount) external {\n        require(tokenB.transferFrom(msg.sender, address(this), amount), \"TokenB transfer failed\");\n        tokenB.burn(address(this), amount);\n        tokenA.mint(msg.sender, amount);\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}